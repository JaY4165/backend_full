package com.example.demo.service;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.dto.DtoClass;
import com.example.demo.entity.EntityClass;
import com.example.demo.exceptio.commonException;
import com.example.demo.repository.Repo;
import com.example.demo.response.ResponseClass;

@Service

public class ServiceImplement implements ServiceInterface {
	
	@Autowired
	Repo Repo;
	
	
	@Override
	public ResponseClass register(DtoClass registerDto)
	{
		
    	validate(registerDto);
    	format(registerDto);
		EntityClass entity = new EntityClass();
		entity.setFirstname(registerDto.getFirstname());
		entity.setLastname(registerDto.getLastname());
		entity.setEmail(registerDto.getEmail());
		entity.setPassword(registerDto.getPassword());
		entity.setAddress(registerDto.getAddress());
		Repo.save(entity);
		
		
		
		
	ResponseClass ResponseClass= new ResponseClass();
	ResponseClass.setStatus(200);
	ResponseClass.setMessage("data saved successfully to DB");
	
		return ResponseClass;
		
	}
	
	
public void validate(DtoClass registerDto)
{
if(registerDto.getEmail()==null || registerDto.getEmail().isEmpty())	
{
	throw new commonException(200, "Email is Empty");
}
}

public void format(DtoClass dtoClass) {
	String  regexPattern = "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@" 
		        + "[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$";
	
	
	Pattern pattern = Pattern.compile(regexPattern);

	
		Matcher matcher = pattern.matcher(dtoClass.getEmail());
		if(!matcher.matches()) {
			throw new commonException(1400, "Email is not valid format");
}
}

}
